from itertools import count
from math import sqrt
from timeit import default_timer as timer


def triangle_numbers():
    """
    The sequence of triangle numbers is generated by adding the natural numbers.

    """
    for index in count(2):
        sum = 0
        for i in range(index):
            sum += i
        yield sum


def divisors(n):
    """
    Returns a set of divisors given an integer

    from: https://stackoverflow.com/a/54047215
    """
    # n is obviously divisable by 1 and itself
    divs = {1, n}

    # for every number from 2 to sqrt(n) + 1
    for i in range(2, int(sqrt(n))+1):
        # if n is divisible by this number
        if n % i == 0:
            # it's a divisor, so at it to the set
            divs.update((i, n//i))

    return divs


def first_triangle_number_with_n_divisors(n):
    first_number = None
    for number in triangle_numbers():
        #print(number, divisors(number), len(divisors(number)))
        if len(divisors(number)) > n:
            first_number = number
            break
    return first_number


# the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55

# 28 is the first triangle number to have over five divisors.
assert first_triangle_number_with_n_divisors(5) == 28

"""
What is the value of the first triangle number to have over five hundred divisors?
"""
start = timer()
print("first triangle number to have over five hundred divisors: {}".format(first_triangle_number_with_n_divisors(500)))
print("took {} seconds".format(timer() - start))
